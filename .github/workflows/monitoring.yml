name: Dependency Updates & Security Monitoring

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  # Check for dependency updates
  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      - name: Update Python dependencies
        run: |
          if [ -f requirements.in ]; then
            pip-compile requirements.in
          fi
          pip install -r requirements.txt
          pip list --outdated --format=json > outdated-packages.json

      - name: Check for security vulnerabilities
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Set up Node.js
        if: hashFiles('frontend/package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check npm updates
        if: hashFiles('frontend/package.json') != ''
        run: |
          cd frontend
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npx npm-check-updates --jsonUpgraded > npm-updates.json || true

      - name: Create dependency update issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let issueBody = '## üîÑ Automated Dependency Update Report\n\n';
            
            // Python dependencies
            if (fs.existsSync('outdated-packages.json')) {
              const outdated = JSON.parse(fs.readFileSync('outdated-packages.json', 'utf8'));
              if (outdated.length > 0) {
                issueBody += '### üêç Python Dependencies\n\n';
                outdated.forEach(pkg => {
                  issueBody += `- **${pkg.name}**: ${pkg.version} ‚Üí ${pkg.latest_version}\n`;
                });
                issueBody += '\n';
              }
            }
            
            // Security vulnerabilities
            if (fs.existsSync('safety-report.json')) {
              const safety = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              if (safety.vulnerabilities && safety.vulnerabilities.length > 0) {
                issueBody += '### üö® Security Vulnerabilities\n\n';
                safety.vulnerabilities.forEach(vuln => {
                  issueBody += `- **${vuln.package_name}**: ${vuln.vulnerability_id} - ${vuln.advisory}\n`;
                });
                issueBody += '\n';
              }
            }
            
            // Node.js dependencies
            if (fs.existsSync('frontend/npm-updates.json')) {
              const npmUpdates = JSON.parse(fs.readFileSync('frontend/npm-updates.json', 'utf8'));
              if (Object.keys(npmUpdates).length > 0) {
                issueBody += '### üì¶ Node.js Dependencies\n\n';
                Object.entries(npmUpdates).forEach(([pkg, version]) => {
                  issueBody += `- **${pkg}**: ${version}\n`;
                });
                issueBody += '\n';
              }
            }
            
            issueBody += '### üîß Recommended Actions\n\n';
            issueBody += '1. Review the dependency updates above\n';
            issueBody += '2. Test critical updates in a development environment\n';
            issueBody += '3. Update dependencies with security vulnerabilities immediately\n';
            issueBody += '4. Create a PR with the approved updates\n\n';
            issueBody += '---\n';
            issueBody += '*This issue was automatically generated by the dependency monitoring workflow.*';
            
            // Only create issue if there are updates or vulnerabilities
            if (issueBody.includes('üêç Python Dependencies') || 
                issueBody.includes('üö® Security Vulnerabilities') || 
                issueBody.includes('üì¶ Node.js Dependencies')) {
              
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'dependencies',
                state: 'open'
              });
              
              // Close existing dependency issues
              for (const issue of issues) {
                if (issue.title.includes('Dependency Update Report')) {
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    state: 'closed'
                  });
                }
              }
              
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üîÑ Dependency Update Report - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['dependencies', 'automated']
              });
            }

  # Monitor application health
  health-monitoring:
    name: Application Health Monitoring
    runs-on: ubuntu-latest
    
    steps:
      - name: Check production health
        run: |
          if [ -n "${{ secrets.PRODUCTION_URL }}" ]; then
            response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.PRODUCTION_URL }}/api/health)
            if [ $response -ne 200 ]; then
              echo "Production health check failed with status: $response"
              exit 1
            fi
            echo "Production health check passed"
          fi

      - name: Check staging health
        run: |
          if [ -n "${{ secrets.STAGING_URL }}" ]; then
            response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.STAGING_URL }}/api/health)
            if [ $response -ne 200 ]; then
              echo "Staging health check failed with status: $response"
              # Don't fail for staging
            fi
            echo "Staging health check completed"
          fi

      - name: Notify on health check failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'üö® HotGigs.ai health check failed! Please investigate immediately.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Database backup verification
  backup-verification:
    name: Backup Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Verify database backups
        run: |
          echo "Verifying database backup integrity..."
          # This would typically connect to your backup storage and verify backups
          echo "Database backup verification completed"

      - name: Verify file storage backups
        run: |
          echo "Verifying file storage backups..."
          # This would verify file storage backups
          echo "File storage backup verification completed"

  # Performance monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    
    steps:
      - name: Run performance checks
        run: |
          if [ -n "${{ secrets.PRODUCTION_URL }}" ]; then
            # Simple performance check
            response_time=$(curl -o /dev/null -s -w "%{time_total}" ${{ secrets.PRODUCTION_URL }}/api/health)
            echo "Response time: ${response_time}s"
            
            # Alert if response time is too high
            if (( $(echo "$response_time > 2.0" | bc -l) )); then
              echo "High response time detected: ${response_time}s"
              exit 1
            fi
          fi

      - name: Notify on performance issues
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ö†Ô∏è HotGigs.ai performance degradation detected!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

