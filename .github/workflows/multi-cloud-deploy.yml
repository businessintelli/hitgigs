name: Multi-Cloud Deployment

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: 'Cloud provider to deploy to'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - aws
          - azure
          - gcp
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_rebuild:
        description: 'Force rebuild of Docker images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY_URL: ghcr.io
  IMAGE_NAME: hotgigs/backend
  
jobs:
  # Determine deployment strategy
  setup:
    runs-on: ubuntu-latest
    outputs:
      deploy_aws: ${{ steps.strategy.outputs.deploy_aws }}
      deploy_azure: ${{ steps.strategy.outputs.deploy_azure }}
      deploy_gcp: ${{ steps.strategy.outputs.deploy_gcp }}
      environment: ${{ steps.strategy.outputs.environment }}
      image_tag: ${{ steps.strategy.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Determine deployment strategy
        id: strategy
        run: |
          # Determine environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            CLOUD_PROVIDER="${{ github.event.inputs.cloud_provider }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            ENVIRONMENT="production"
            CLOUD_PROVIDER="all"
          else
            ENVIRONMENT="staging"
            CLOUD_PROVIDER="all"
          fi
          
          # Determine cloud providers to deploy to
          DEPLOY_AWS="false"
          DEPLOY_AZURE="false"
          DEPLOY_GCP="false"
          
          if [[ "$CLOUD_PROVIDER" == "all" ]] || [[ "$CLOUD_PROVIDER" == "aws" ]]; then
            DEPLOY_AWS="true"
          fi
          if [[ "$CLOUD_PROVIDER" == "all" ]] || [[ "$CLOUD_PROVIDER" == "azure" ]]; then
            DEPLOY_AZURE="true"
          fi
          if [[ "$CLOUD_PROVIDER" == "all" ]] || [[ "$CLOUD_PROVIDER" == "gcp" ]]; then
            DEPLOY_GCP="true"
          fi
          
          # Generate image tag
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            IMAGE_TAG="${{ github.ref_name }}-${{ github.sha }}"
          else
            IMAGE_TAG="latest-${{ github.sha }}"
          fi
          
          echo "deploy_aws=$DEPLOY_AWS" >> $GITHUB_OUTPUT
          echo "deploy_azure=$DEPLOY_AZURE" >> $GITHUB_OUTPUT
          echo "deploy_gcp=$DEPLOY_GCP" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG:0:50}" >> $GITHUB_OUTPUT
          
          echo "Deployment Strategy:"
          echo "- Environment: $ENVIRONMENT"
          echo "- AWS: $DEPLOY_AWS"
          echo "- Azure: $DEPLOY_AZURE"
          echo "- GCP: $DEPLOY_GCP"
          echo "- Image Tag: ${IMAGE_TAG:0:50}"

  # Build and push Docker images
  build:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name != 'pull_request'
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=${{ needs.setup.outputs.image_tag }}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_ENV=${{ needs.setup.outputs.environment }}
            
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.image_tag }}
          format: spdx-json
          output-file: sbom.spdx.json
          
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to AWS
  deploy-aws:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.deploy_aws == 'true' && github.event_name != 'pull_request'
    environment: 
      name: aws-${{ needs.setup.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          
      - name: Deploy to AWS
        id: deploy
        run: |
          cd cloud-deployments/aws/scripts
          export TF_VAR_db_password="${{ secrets.DB_PASSWORD }}"
          export TF_VAR_domain_name="${{ vars.DOMAIN_NAME || 'hotgigs.ai' }}"
          export DOCKER_REGISTRY="${{ env.REGISTRY_URL }}"
          export APP_IMAGE_TAG="${{ needs.setup.outputs.image_tag }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
          
          ./deploy-aws.sh ${{ needs.setup.outputs.environment }} deploy false true
          
          # Get deployment URL
          cd ../terraform
          LOAD_BALANCER_URL=$(terraform output -raw load_balancer_url 2>/dev/null || echo "")
          echo "url=https://$LOAD_BALANCER_URL" >> $GITHUB_OUTPUT
          
      - name: Run health check
        run: |
          URL="${{ steps.deploy.outputs.url }}"
          if [[ -n "$URL" ]]; then
            for i in {1..10}; do
              if curl -f "$URL/api/health" --max-time 30; then
                echo "Health check passed"
                exit 0
              fi
              echo "Health check failed, retrying in 30s..."
              sleep 30
            done
            echo "Health check failed after 10 attempts"
            exit 1
          fi

  # Deploy to Azure
  deploy-azure:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.deploy_azure == 'true' && github.event_name != 'pull_request'
    environment: 
      name: azure-${{ needs.setup.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          
      - name: Deploy to Azure
        id: deploy
        run: |
          cd cloud-deployments/azure/scripts
          export TF_VAR_db_password="${{ secrets.DB_PASSWORD }}"
          export TF_VAR_domain_name="${{ vars.DOMAIN_NAME || 'hotgigs.ai' }}"
          export DOCKER_REGISTRY="${{ env.REGISTRY_URL }}"
          export APP_IMAGE_TAG="${{ needs.setup.outputs.image_tag }}"
          export AZURE_LOCATION="${{ vars.AZURE_LOCATION || 'East US' }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
          
          ./deploy-azure.sh ${{ needs.setup.outputs.environment }} deploy false true
          
          # Get deployment URL
          cd ../terraform
          LOAD_BALANCER_IP=$(terraform output -raw load_balancer_ip 2>/dev/null || echo "")
          echo "url=http://$LOAD_BALANCER_IP" >> $GITHUB_OUTPUT
          
      - name: Run health check
        run: |
          URL="${{ steps.deploy.outputs.url }}"
          if [[ -n "$URL" ]]; then
            for i in {1..10}; do
              if curl -f "$URL/api/health" --max-time 30; then
                echo "Health check passed"
                exit 0
              fi
              echo "Health check failed, retrying in 30s..."
              sleep 30
            done
            echo "Health check failed after 10 attempts"
            exit 1
          fi

  # Deploy to GCP
  deploy-gcp:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.deploy_gcp == 'true' && github.event_name != 'pull_request'
    environment: 
      name: gcp-${{ needs.setup.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          
      - name: Deploy to GCP
        id: deploy
        run: |
          cd cloud-deployments/gcp/scripts
          export GCP_PROJECT_ID="${{ vars.GCP_PROJECT_ID }}"
          export GCP_REGION="${{ vars.GCP_REGION || 'us-central1' }}"
          export GCP_ZONE="${{ vars.GCP_ZONE || 'us-central1-a' }}"
          export TF_VAR_db_password="${{ secrets.DB_PASSWORD }}"
          export TF_VAR_domain_name="${{ vars.DOMAIN_NAME || 'hotgigs.ai' }}"
          export DOCKER_REGISTRY="${{ env.REGISTRY_URL }}"
          export APP_IMAGE_TAG="${{ needs.setup.outputs.image_tag }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
          
          ./deploy-gcp.sh ${{ needs.setup.outputs.environment }} deploy false true
          
          # Get deployment URL
          cd ../terraform
          LOAD_BALANCER_IP=$(terraform output -raw load_balancer_ip 2>/dev/null || echo "")
          echo "url=http://$LOAD_BALANCER_IP" >> $GITHUB_OUTPUT
          
      - name: Run health check
        run: |
          URL="${{ steps.deploy.outputs.url }}"
          if [[ -n "$URL" ]]; then
            for i in {1..10}; do
              if curl -f "$URL/api/health" --max-time 30; then
                echo "Health check passed"
                exit 0
              fi
              echo "Health check failed, retrying in 30s..."
              sleep 30
            done
            echo "Health check failed after 10 attempts"
            exit 1
          fi

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [setup, deploy-aws, deploy-azure, deploy-gcp]
    if: always() && github.event_name != 'pull_request'
    strategy:
      matrix:
        cloud: [aws, azure, gcp]
        exclude:
          - cloud: aws
            condition: ${{ needs.setup.outputs.deploy_aws != 'true' }}
          - cloud: azure  
            condition: ${{ needs.setup.outputs.deploy_azure != 'true' }}
          - cloud: gcp
            condition: ${{ needs.setup.outputs.deploy_gcp != 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install requests pytest
          
      - name: Run integration tests
        run: |
          # Get deployment URL from previous job
          if [[ "${{ matrix.cloud }}" == "aws" ]]; then
            URL="${{ needs.deploy-aws.outputs.url }}"
          elif [[ "${{ matrix.cloud }}" == "azure" ]]; then
            URL="${{ needs.deploy-azure.outputs.url }}"
          elif [[ "${{ matrix.cloud }}" == "gcp" ]]; then
            URL="${{ needs.deploy-gcp.outputs.url }}"
          fi
          
          if [[ -n "$URL" ]]; then
            python test_comprehensive_integration.py --url "$URL"
          else
            echo "No URL available for ${{ matrix.cloud }}, skipping tests"
          fi

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [setup, deploy-aws, deploy-azure, deploy-gcp, integration-tests]
    if: always() && github.event_name != 'pull_request'
    steps:
      - name: Determine overall status
        id: status
        run: |
          # Check if any deployment failed
          AWS_STATUS="${{ needs.deploy-aws.result }}"
          AZURE_STATUS="${{ needs.deploy-azure.result }}"
          GCP_STATUS="${{ needs.deploy-gcp.result }}"
          TESTS_STATUS="${{ needs.integration-tests.result }}"
          
          OVERALL_STATUS="success"
          if [[ "$AWS_STATUS" == "failure" ]] || [[ "$AZURE_STATUS" == "failure" ]] || [[ "$GCP_STATUS" == "failure" ]] || [[ "$TESTS_STATUS" == "failure" ]]; then
            OVERALL_STATUS="failure"
          elif [[ "$AWS_STATUS" == "cancelled" ]] || [[ "$AZURE_STATUS" == "cancelled" ]] || [[ "$GCP_STATUS" == "cancelled" ]] || [[ "$TESTS_STATUS" == "cancelled" ]]; then
            OVERALL_STATUS="cancelled"
          fi
          
          echo "status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          
      - name: Send Slack notification
        if: vars.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          channel: '#deployments'
          webhook_url: ${{ vars.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "attachments": [{
                "color": "${{ steps.status.outputs.status }}" === "success" ? "good" : "${{ steps.status.outputs.status }}" === "failure" ? "danger" : "warning",
                "title": "HotGigs.ai Multi-Cloud Deployment",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "${{ needs.setup.outputs.environment }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}".substring(0, 8),
                    "short": true
                  },
                  {
                    "title": "AWS",
                    "value": "${{ needs.deploy-aws.result }}",
                    "short": true
                  },
                  {
                    "title": "Azure", 
                    "value": "${{ needs.deploy-azure.result }}",
                    "short": true
                  },
                  {
                    "title": "GCP",
                    "value": "${{ needs.deploy-gcp.result }}",
                    "short": true
                  },
                  {
                    "title": "Tests",
                    "value": "${{ needs.integration-tests.result }}",
                    "short": true
                  }
                ]
              }]
            }

